<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on SPERIXLABS</title>
    <link>https://sperixlabs.org/tags/flutter/</link>
    <description>Recent content in Flutter on SPERIXLABS</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>SPERIXLABS</copyright>
    <lastBuildDate>Mon, 08 Sep 2025 21:46:53 +0000</lastBuildDate>
    <atom:link href="https://sperixlabs.org/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Identifying Packages Used by Flutter Apps</title>
      <link>https://sperixlabs.org/post/2025/09/identifying-packages-used-by-flutter-apps/</link>
      <pubDate>Mon, 08 Sep 2025 21:46:53 +0000</pubDate>
      <guid>https://sperixlabs.org/post/2025/09/identifying-packages-used-by-flutter-apps/</guid>
      <description>&lt;p&gt;Sometimes it&amp;rsquo;s useful to determine what Flutter packages are used in a Flutter app. This can be useful for security audits, vulnerability assessments, or just to understand the app better.&lt;/p&gt;&#xA;&lt;h2 id=&#34;technique&#34;&gt;Technique&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;For android apps, extract or export the &lt;code&gt;libapp.so&lt;/code&gt; file from the APK file. This file is usually located in the &lt;code&gt;lib/&amp;lt;architecture&amp;gt;/&lt;/code&gt; directory inside the APK file. For iOS, you can find an equivalent binary file in the &lt;code&gt;Frameworks/App.framework/App&lt;/code&gt; inside the extracted IPA file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intercepting HTTP traffic in Android Flutter Apps</title>
      <link>https://sperixlabs.org/post/2024/11/intercepting-http-traffic-in-android-flutter-apps/</link>
      <pubDate>Sat, 02 Nov 2024 09:36:53 +0000</pubDate>
      <guid>https://sperixlabs.org/post/2024/11/intercepting-http-traffic-in-android-flutter-apps/</guid>
      <description>&lt;p&gt;Intercepting HTTP traffic in Flutter apps has attracted significant interest among security researchers. Tools like &lt;a href=&#34;https://github.com/Impact-I/reFlutter&#34;&gt;reflutter&lt;/a&gt; have simplified this process. However, these tools often rely on hard-coded HTTP ports, which can limit flexibility in some cases.&lt;/p&gt;&#xA;&lt;p&gt;This guide outlines a straightforward approach for analyzing Android Flutter apps without the need to rely on specific, fixed ports.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;required-tools&#34;&gt;Required Tools&lt;/h2&gt;&#xA;&lt;p&gt;To intercept HTTP traffic in Flutter apps, you will need the following tools:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
